name: PHPUnit with MySQL

on: [push]

jobs:
  phpunit:
    runs-on: ubuntu-latest
    env:
      DB_DATABASE: officelife
      DB_USERNAME: root
      DB_PASSWORD: password
      BROADCAST_DRIVER: log
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: officelife
        ports:
          - 33306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        image: redis
        ports:
          - 6379/tcp
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v1
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: vendor
          key: composer-${{ hashFiles('composer.lock') }}
      - name: Install dependencies
        run: composer install -n -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist
      - name: Generate key
        run: php artisan key:generate
      - name: Run migrations
        env:
          # APP_ENV: testing
          # DB_CONNECTION: mysql
          # DB_HOST: mysql
          # DB_PORT: 3306
          # DB_DATABASE: officelife
          # DB_USER: root
          # DB_PASSWORD: password
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}
        run: php artisan migrate
      - name: Execute tests via PHPUnit
        run: ./vendor/bin/phpunit
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}
          # APP_ENV: testing
          # DB_CONNECTION: mysql
          # DB_HOST: mysql
          # DB_PORT: 3306
          #DB_DATABASE: officelife
          #DB_USER: root
          #DB_PASSWORD: password
# GitHub Action for Laravel with MySQL and Redis
# name: Testing Laravel with MySQL
# on: [push]
# jobs:
#   laravel:
#     name: PHP ${{ matrix.php-versions }}
#     runs-on: ubuntu-latest
#     env:
#       DB_DATABASE: officelife
#       DB_USERNAME: root
#       DB_PASSWORD: password
#       BROADCAST_DRIVER: log
#       CACHE_DRIVER: redis
#       QUEUE_CONNECTION: redis
#       SESSION_DRIVER: redis
#     services:
#       mysql:
#         image: mysql:5.7
#         env:
#           MYSQL_ALLOW_EMPTY_PASSWORD: false
#           MYSQL_ROOT_PASSWORD: password
#           MYSQL_DATABASE: officelife
#         ports:
#           - 3306
#         options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
#       redis:
#         image: redis
#         ports:
#           - 6379/tcp
#         options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
#     strategy:
#       fail-fast: false
#       matrix:
#         php-versions: ['7.3', '7.4']
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v1
#       - name: Setup PHP, with composer and extensions
#         uses: shivammathur/setup-php@v1 #https://github.com/shivammathur/setup-php
#         with:
#           php-version: ${{ matrix.php-versions }}
#           extensions: mbstring, dom, fileinfo, mysql
#           coverage: none
#       - name: Get composer cache directory
#         id: composer-cache
#         run: echo "::set-output name=dir::$(composer config cache-files-dir)"
#       - name: Cache composer dependencies
#         uses: actions/cache@v1
#         with:
#           path: ${{ steps.composer-cache.outputs.dir }}
#           # Use composer.json for key, if composer.lock is not committed.
#           # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
#           key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
#           restore-keys: ${{ runner.os }}-composer-
#       - name: Install Composer dependencies
#         run: composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader
#       - name: Prepare the application
#         run: |
#           php -r "file_exists('.env') || copy('.env.example', '.env');"
#           php artisan key:generate
#       - name: Clear Config
#         run: php artisan config:clear
#       - name: Run Migration
#         run: php artisan migrate -v
#         env:
#           DB_PORT: ${{ job.services.mysql.ports['3306'] }}
#       - name: Test with phpunit
#         run: vendor/bin/phpunit --coverage-text
#         env:
#           DB_PORT: ${{ job.services.mysql.ports['3306'] }}
#           #DB_PORT: 3306
